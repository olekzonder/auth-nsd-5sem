---
title: "Сбор и аналитическая обработка информации о сетевом трафике"
author: Александр Смирнов
format: 
    md:
        output-file: README.md
engine: knitr
---

## Цель работы

1.Развить практические навыки использования современного стека инструментов сбора и аналитической обработки информации о сетвом трафике

2.Освоить базовые подходы блокировки нежелательного сетевого трафика

3.Закрепить знания о современных сетевых протоколах прикладного уровня

## Ход выполнения практической работы

1.C помощью Wireshark был собран сетевой трафик объёмом 800 Мб:

![](screenshots/1.png){fig-align="center"}

2.C помощью утилиты Zeek была выделена метаинформация сетевого трафика (файлы http.log и dns.log в репозитории)

3.Загрузим и соединим файлы, содержащие списки источников нежелательного трафика:
```{bash}
mkdir hosts
wget -q https://github.com/StevenBlack/hosts/raw/master/data/add.2o7Net/hosts -O hosts/hosts.1
wget -q https://raw.githubusercontent.com/StevenBlack/hosts/master/data/KADhosts/hosts -O hosts/hosts.2
wget -q https://raw.githubusercontent.com/StevenBlack/hosts/master/data/yoyo.org/hosts -O hosts/hosts.3
wget -q https://raw.githubusercontent.com/StevenBlack/hosts/master/data/tiuxo/hosts -O hosts/hosts.4
wget -q https://raw.githubusercontent.com/StevenBlack/hosts/master/data/URLHaus/hosts -O hosts/hosts.5
wget -q https://raw.githubusercontent.com/StevenBlack/hosts/master/data/mvps.org/hosts -O hosts/hosts.6
sort hosts/hosts* | grep -Eo '^([^\\"'\''#]|\\.|"([^\\"]|\\.)*"|'\''[^'\'']*'\'')*' | uniq > hosts.data
rm -rf hosts
```
    
В результате был получен файл hosts.data.

4.Установим библиотеку Zeek Analysis Toolkit для преобразоваия метаинформации сетевого трафика в формате log-файлов в датафрейм Pandas:
```{bash}
pip -q install zat
```

5.После установки библиотеки преобразуем файл dns.log в датафрейм Pandas:

```{python}
import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)
import numpy as np
import pandas as pd
from zat.log_to_dataframe import LogToDataFrame
df = LogToDataFrame()
zeek_df = df.create_dataframe('dns.log')
domains = zeek_df['query']
domains.name='CNAME'
```

6.Затем преобразуем и файл со списком источников нежелательного трафика:

```{python}
df = pd.read_csv('hosts.data',sep="\s+",names=['redirect_to','CNAME'])
bad_domains = df['CNAME']
```

7.Объединив два полученных датафрейма, получим процент нежелательного трафика:
```{python}
merged = pd.merge(domains,bad_domains, on=['CNAME'],how='left',indicator='exists')
merged['exists'] = np.where(merged.exists == 'both',True,False)
count = merged['exists'].value_counts()[1]
percentile = round(merged['exists'].value_counts(normalize=True)[1]*100,2)

print("Вхождений DNS имён из списков в собранном трафике: {}.".format(count),
"Процент нежелательного трафика: {}%.".format(percentile),sep='\n')
```

## Оценка результата

В результате лабораторной работы мы смогли определить нежелательный трафик.

## Вывод

Таким образом, мы научились анализировать сетевой трафик и, используя современный стек инструментов, был освоен подход блокировки нежелательного сетевого трафика на основе чёрного списка.